group 'duorourou.micro.services.demo'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'duoruoruo.micro.services.demo.gateway'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'
    compile group: 'org.assertj', name: 'assertj-core-java8', version: '1.0.0m1'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-amqp'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'info.cukes', name: 'cucumber-jvm', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-spring', version: '1.2.5'
}

defaultTasks 'clean', 'build'

jacoco {
    toolVersion = "0.7.6.201602180812"
}

checkstyle {
    configFile = file("${project.projectDir}/config/checkstyle.xml")
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
